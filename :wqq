.TH _PRINTF 3 " 18 OCTOBER 2023

.SH NAME

_printf\fR -\ formatted output conversion

.SH SYNOPSIS

#include <main.h>

int
printf(const char *format, ...);

.SH DESCRIPTION

The function _printf()\fR writes output to stdout, the standard output.
The function writes under the control of a format string that specifies how subsequent arguments (accessed via the variable-length argument facilities of stdarg) are converted for output.

.B Return value

Upon successful return, _printf()\fR returns the number of characters printed (excluding the null byte used to end output to strings).

If an output error is encountered, -1 is returned.

.B Format of the format string

The format string is a constant character string composed of zero or more directives: ordinary characters (not %) which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Conversion specification is introduced by the character % and ends with a conversion specifier.

In between the % character and conversion specifier, there may be (in order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier. The arguments must correspond with the conversion specifier, and are used in the order given.

.B Flag Characters

The character % may be followed by zero or more of the following flags:

.RS
#
For o conversions, the first character of the output string is prefixed with 0 if it was not zero already. For x and X converions, 0x or 0X, respectively, is prepended for non-zero numbers.
.RE

.RS
'
(space) A blank is left before a positive number or empty string produced by a signed conversion.
.RE

.RS
+
A sign (+ or -) is always placed before a number produced by signed conversion.
.RE

.RS
0
For d, i, o, u, x, X conversions, the converted value is padded on the left with zeroes rather than blanks. If the 0 flag is provided to a numeric conversion with a specified precision, it is ignored.
.RE

.RS
-
The converted value is left-justified (padded on the right with blanks instead of on the left with blanks or zeroes). Overrides a 0 flag.
.RE

.B Field Width

After flags, a minimum field width may be specified by a decimal digit string. The first digit must be non-zero. If the converted value has fewer characters than the provided width, the output is padded on the left or right with spaces (depending on whether the - flag was provided).

Alternatively, width may be provied as an argument using the * character. For example, in the following:

```c
_printf("%*d\\n", 6, 1);


the argument 6 is considered the width for the conversion of the decimal 1.

.B Precision

After any flags or provided width, a precision may be specified by a . followed by a decimal digit string. For d, i, o, u, x, X conversions, the precision specifies the minimum number of digits to appear. For s and S conversions, the precision specifies the maximum characters to be printed.

Alternatively, precision may be provided as an argument using the * character after the .. For example, in the following:

c
_printf("%.*d\\n", 6, 1);


the argument 6 is considered the precision for the conversion of the decimal 1.

.B Conversion Specifiers

A character that specifies the type of conversion to be applied. The conversion specifiers and their meaning are:

.RS
d, i
The int argument is converted to signed decimal notation.
.RE

.RS
b
The unsigned int argument is converted to binary.
.RE

.RS
o, u, x, X
The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and X) notation. The letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions.
.RE

.RS
c
The int argument is converted to an unsigned char, and the resulting character is written.
.RE

.RS
s
The const char * argument is expected to be a pointer to a character array (pointer to a string). Characters from the array are written starting from the first element of the array and ending at, but not including, the terminating null byte ('\0').
.RE

.RS
S
Identical to the s conversion specifier, except any non-printable
